<?php

namespace AppBundle\Entity;

//$ php app/console doctrine:generate:entities AppBundle/Entity/Product генерация геттеров и сеттеров
//php app/console doctrine:schema:update --force генерация таблиц
//
// php app/console doctrine:mapping:import AppBundle yml   генерация модели из базы
//Таким образом мы создадим конфиг для построения модели. Формат может быть разным, например, yml, xml и т.д. После этого создадим ORM:
//php app/console doctrine:generate:entities AppBundle
//проверим наличие репозитория
//    repositoryClass: AppBundle\Entity\ThtableRepository
//php app/console cache:clear
//https://www.skipper18.com/en/download  визуальное проектирование базы
//http://www.symfony2cheatsheet.com/

use Symfony\Component\Validator\Context\ExecutionContextInterface;
use Symfony\Component\Validator\ExecutionContext;
use Symfony\Component\Validator\Constraint;
use Symfony\Component\Validator\Constraints as Assert;




/**
 * Сервер домашней автоматизации.
 * @author kitserg68@gmail.com
 *
 */

use Doctrine\ORM\Mapping as ORM;

/**
 * @Assert\Callback(methods={"isSumOk"})
 * @ORM\Entity
 * @ORM\Table(name="thtable")
 * @ORM\Entity(repositoryClass="AppBundle\Entity\ThtableRepository")
 */
class Thtable {

    /**
     * @ORM\Column(type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @ORM\Column(type="datetime")
     */
    protected $date;

    /**
     * @ORM\Column(type="integer")
     */
    protected $room;

    /**
     * @ORM\Column(type="decimal", scale=2)
     */
    protected $co2;

    /**
     * @ORM\Column(type="decimal", scale=2)
     */
    protected $t;

    /**
     * @ORM\Column(type="decimal", scale=2)
     */
    protected $h;

    /**
     * @ORM\Column(type="decimal", scale=2)
     */
    protected $voc;

    /**
     * @ORM\Column(type="decimal", scale=2)
     */
    protected $vocr;

    /**
     * @ORM\Column(type="decimal", scale=2)
     */
    protected $vocold;
    protected $CheckFields;
    /**
     * @ORM\Column(type="decimal", scale=2)
     */
    protected $deh;
    

    public function __construct() {
        $this->date = new \DateTime("now", new \DateTimeZone("Europe/Moscow"));
        $this->room = 1;
        $this->deh = 0;
    }

    /**
     * Get id
     *
     * @return integer
     */
    public function getId() {
        return $this->id;
    }

    /**
     * Set date
     *
     * @param \DateTime $date
     *
     * @return Thtable
     */
    public function setDate(\DateTime $date) {
        $this->date = $date;

        return $this;
    }

    /**
     * Get date
     *
     * @return \DateTime
     */
    public function getDate() {
        return $this->date;
    }

    /**
     * Set room
     *
     * @param \AppBundle\Entity\Rooms $room
     *
     * @return Thtable
     */
    public function setRoom(\AppBundle\Entity\Rooms $room = null) {
        $this->room = $room;

        return $this;
    }

    /**
     * Get room
     *
     * @return \AppBundle\Entity\Rooms
     */
    public function getRoom() {
        return $this->room;
    }

    /**
     * Set co2
     *
     * @param string $co2
     *
     * @return Thtable
     */
    public function setCo2($co2) {
        $this->co2 = $co2;

        return $this;
    }

    /**
     * Get co2
     *
     * @return string
     */
    public function getCo2() {
        return $this->co2;
    }

    /**
     * Set t
     *
     * @param string $t
     *
     * @return Thtable
     */
    public function setT($t) {
        $this->t = $t;

        return $this;
    }

    /**
     * Get t
     *
     * @return string
     */
    public function getT() {
        return $this->t;
    }

    /**
     * Set h
     *
     * @param string $h
     *
     * @return Thtable
     */
    public function setH($h) {
        if ($h>100){ // во влажности передаем статус наполнения увлажнителя
            $h-=100;
            $this->deh=1;
        }
        $this->h = $h;

        return $this;
    }

    /**
     * Get h
     *
     * @return string
     */
    public function getH() {
        return $this->h;
    }
    /**
     * Set deh
     *
     * @param string $deh
     *
     * @return Thtable
     */
    public function setDeh($deh) {
        $this->deh = $deh;

        return $this;
    }

    /**
     * Get deh
     *
     * @return string
     */
    public function getDeh() {
        return $this->deh;
    }
    /**
     * Set vOC
     *
     * @param string $vOC
     *
     * @return Thtable
     */
    public function setVoc($voc) {
        $this->voc = $voc;
        return $this;
    }

    /**
     * Get vOC
     *
     * @return string
     */
    public function getVoc() {
        return $this->voc;
    }

    /**
     * Set vOCR
     *
     * @param string $vOCR
     *
     * @return Thtable
     */
    public function setVocr($vocr) {
        $this->vocr = $vocr;

        return $this;
    }

    /**
     * Get vOCR
     *
     * @return string
     */
    public function getVocr() {
        return $this->vocr;
    }

    /**
     * Set vOCold
     *
     * @param string $vOCold
     *
     * @return Thtable
     */
    public function setVocold($vocold) {
        $this->vocold = $vocold;

        return $this;
    }

    /**
     * Get vOCold
     *
     * @return string
     */
    public function getVocold() {
        return $this->vocold;
    }

    public function setCheckFields($CheckFields) {
        $this->CheckFields = $CheckFields;

        return $this;
    }

    public function getCheckFields() {
        return $this->CheckFields;
    }

    /**
     * @Assert\True(message = "Контрольное поле не корректно")
     */
    public function isSumOk() {
        return (round($this->getCo2() + $this->getH() + $this->getT() + $this->getVoc()) == round($this->getCheckFields()));
    }

    public function toArray() {
        return array(
            $this->getDate()->format('Y-m-d\TH:i:s'),
            $this->getCo2(),
            $this->VocToCo(),
            $this->getH(),
            $this->getT(),

        );
    }
    public function VocToCo(){
        return (log((($this->getVoc()/36000-0.11)/0.1),0.945)+40)*2200/24+500;
    }
}
